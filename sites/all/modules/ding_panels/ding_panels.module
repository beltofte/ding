<?php // $Id$

/**
 * @file ding_panels.module
 * Panels plugins for the Ding project.
 */

/**
 * Implementation of hook_theme().
 */
function ding_panels_theme($existing, $type, $theme, $path) {
  return array(
    'ding_panels_content_library_title' => array(
      'arguments' => array('node' => NULL, 'display_header_image' => FALSE),
      'template' => 'ding_panels_content_libary_title',
      'preprocess functions' => array('ding_panels_content_preprocess_library_title'),
    ),
    'ding_panels_content_library_location' => array(
      'arguments' => array('node' => NULL),
      'template' => 'ding_panels_content_libary_location',
      'preprocess functions' => array('ding_panels_content_preprocess_library_location'),
    ),
    'ding_panels_library_portal_title' => array(
      'arguments' => array('node' => NULL),
    ),
    'ding_panels_library_user_staff_title' => array(
      'arguments' => array('user' => NULL),
      'template' => 'ding_panels_library_user_staff_title',
      'preprocess functions' => array('ding_panels_content_preprocess_library_user_staff_title'),
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function ding_panels_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Preprocess hook for the library title and navigation pane.
 */
function ding_panels_content_preprocess_library_title(&$variables) {
  $node = $variables['node'];
  if (isset($node->ding_slug) && !empty($node->ding_slug)) {
    $base_path = 'biblioteker/' . $node->ding_slug;
  }
  else {
    $base_path = 'biblioteker/' . $node->nid;
  }

  $variables['library_title'] = l($node->title, 'node/' . $node->nid);

  if (!isset($node->library_page_type) || $node->library_page_type == 'normal') {
    $variables['library_links'] = _ding_panels_content_theme_library_title_navigation($node, $base_path);
    $variables['library_navigation'] = theme('item_list', $variables['library_links']);
  }
}

function _ding_panels_content_theme_library_title_navigation($node, $base_path) {
  $links = array();
  if ($node->type == 'library') {
    $links['blog'] = l(t('Blog'), $base_path . '/blog');
    $links['events'] = l(t('Events'), $base_path . '/arrangementer');
    $links['facilities'] = l(t('Facilities'), $base_path . '/faciliteter');
    $links['about'] = l(t('About the library'), $base_path . '/om');
  }
  return $links;
}

/**
 * Preprocess hook for the library location.
 */
function ding_panels_content_preprocess_library_location(&$variables) {
  $node = $variables['node'];

  // Add a static Google map to the location information.
  if (function_exists('location_has_coordinates') && location_has_coordinates($node->location)) {
    $map_url = url('http://maps.google.com/staticmap', array('query' => array(
      'zoom' => 14,
      'size' => '194x140',
      'markers' => $node->location['latitude'] . ',' . $node->location['longitude'],
      'key' => keys_api_get_key('gmap', $_SERVER['HTTP_HOST']),
      'sensor' => 'false',
    )));
    $variables['library_map'] = theme('image', $map_url, '', '', NULL, FALSE);
  }

  // Add links to the location, based on the ones defined on a node,
  // plus a few special ones.
  $links = array();
  foreach ($node->field_links as $delta => $link) {
    $links[$delta] = $link;

    // Extract the domain name from the link, and add it as a class.
    // This will not work for sites which has a two-part ccTLD like
    // co.uk, but most web 2.0 services should work.
    $match = array();
    if (preg_match('/^\w+:\/\/[\w._-]+\.([\w-_]+)\.\w+\//', $link['url'], $match)) {
      $links[$delta]['attributes'] = array(
        'class' => $match[1],
      );
    }

    // theme_links expects the URL to be labelled 'href'
    $links[$delta]['href'] = $link['url'];
  }

  // Load the Danish location helpers.
  module_load_include('inc', 'location', 'supported/location.dk');
  // And add a link to Rejseplanen.
  $links[] = array(
    'title' => 'Rejseplanen',
    'href' => location_map_link_dk_rejseplanen($node->location),
    'attributes' => array('class' => 'rejseplanen'),
  );

  $variables['library_links'] = theme('links', $links);
}

/**
 * Theme function for library portal title.
 */
function theme_ding_panels_library_portal_title($node) {
  return '<h1>' . check_plain($node->title) . '</h1>';
}

/**
 * Preprocess function for the staff title.
 */
function ding_panels_content_preprocess_library_user_staff_title(&$variables) {
  // Generate list of links to the libraries the user is related to.
  $libs = array();
  if (isset($variables['user']->userreference['library'])) {
    foreach ($variables['user']->userreference['library'] as $nid => $title) {
      $libs[] = l($title, 'node/' . $nid);
    }
  }
  if (!empty($libs)) {
    $variables['related_libraries'] = theme('item_list', $libs);
  }
  else {
    $variables['related_libraries'] = '';
  }
}

